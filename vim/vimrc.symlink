" Set up vim-plug
set nocompatible
filetype off

function! Cond(cond, ...)
    let opts = get(a:000, 0, {})
    return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin()
" Global packages
Plug 'scrooloose/nerdcommenter'
Plug 'haya14busa/is.vim'

" Exclude these plugins from vscode
Plug 'vim-airline/vim-airline', Cond(!exists('g:vscode'))
Plug 'vim-airline/vim-airline-themes', Cond(!exists('g:vscode'))
Plug 'tpope/vim-sleuth', Cond(!exists('g:vscode'))
Plug 'tpope/vim-fugitive', Cond(!exists('g:vscode'))
Plug 'crusoexia/vim-monokai', Cond(!exists('g:vscode'))
Plug 'easymotion/vim-easymotion', Cond(!exists('g:vscode'))

" VSCode only plugins
Plug 'asvetliakov/vim-easymotion', Cond(exists('g:vscode'), { 'as': 'vsc-easymotion' })

call plug#end()

filetype plugin indent on

""" GLOBAL SETTINGS

set encoding=utf-8

" set the leader to ',' where it belongs
let mapleader=","
let maplocalleader="\\"

" cursor keys should linewrap
set whichwrap+=<,>,h,l,[,]

" backspace fixing
set backspace=indent,eol,start

" fix tabs
set smarttab
set autoindent
set copyindent
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

" fix dumb comment thing
autocmd FileType * setlocal formatoptions-=t formatoptions-=r formatoptions-=o

" show matching parens
set showmatch

" allow opening of a new buffer without saving
set hidden

" backups are dumb
set nobackup

" swap is dumb
set noswapfile

" Turn on automatic rereading of files
set autoread

" stop beeping
set visualbell
set noerrorbells

"Smart Search
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set hlsearch

" easymotion config
let g:EasyMotion_do_mapping = 0 " Disable default mappings

map <Leader> <Plug>(easymotion-prefix)

 " clear search highlighting
"nnoremap <leader><space> :nohlsearch<CR> " not needed with is.vim plugin

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

"The first time you press home got to the begining of the text
"The second time go to the begining of the line
function! SmartHome()
    let s:col = col(".")
    normal! ^
    if s:col == col(".")
        normal! 0
    endif
endfunction

nnoremap <silent> <Home> :call SmartHome()<CR>
inoremap <silent> <Home> <C-O>:call SmartHome()<CR>

" Tab complete on commands
set wildmenu
set wildmode=longest:full,full

set showcmd

if !exists('g:vscode')
    " NON VSCODE SETTINGS

    " color crap
    syntax enable
    set background=dark
    colorscheme monokai

    " get some mouse action
    set mouse=a


    " EASYMOTION SETUP, vscode incompatible stuff
    nmap <Leader>L <Plug>(easymotion-overwin-line)
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-overwin-f2)

    "airline
    "let g:airline_extensions = []
    let g:airline#extensions#whitespace#enabled = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline_powerline_fonts = 1

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = '¬ª'
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_right_sep = '¬´'
    let g:airline_right_sep = '‚óÄ'
    let g:airline_symbols.colnr = ' „èá:'
    let g:airline_symbols.colnr = ' ‚ÑÖ:'
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚ò∞'
    let g:airline_symbols.linenr = ' ‚êä:'
    let g:airline_symbols.linenr = ' ‚ê§:'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.maxlinenr = ''
    "let g:airline_symbols.maxlinenr = '„èë'
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.paste = '√û'
    let g:airline_symbols.paste = '‚à•'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '…Ü'
    let g:airline_symbols.whitespace = 'Œû'

    " powerline symbols
    let g:airline_left_sep = 'ÓÇ∞'
    let g:airline_left_alt_sep = 'ÓÇ±'
    let g:airline_right_sep = 'ÓÇ≤'
    let g:airline_right_alt_sep = 'ÓÇ≥'
    let g:airline_symbols.branch = 'ÓÇ†'
    "let g:airline_symbols.colnr = ' ÓÇ£:'
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.readonly = 'ÓÇ¢'
    let g:airline_symbols.linenr = ' ÓÇ°:'
    "let g:airline_symbols.maxlinenr = '‚ò∞ '
    let g:airline_symbols.dirty='‚ö°'

    "F2 now toggles the show line numbers and they are on by default
    set number
    map <F2> :set invnumber<cr>a
    map! <F2> <Esc>:set invnumber<cr>

    "This will delete extra spaces at the end of a line and will
    "change tabs to spaces
    map <F6> :retab<cr>:%s/\s\+$//<cr>
    map! <F6> <Esc>:retab<cr>:%s/\s\+$//<cr>a

    "Function for Hexedit mode
    command -bar Hexmode call ToggleHex()
    function ToggleHex()
        if !exists("b:editHex") || !b:editHex
            "Go to hex view
            let b:editHex=1
            %!xxd
        else
            "Go to text view
            let b:editHex=0
            %!xxd -r
        endif
    endfunction
    "Enable Hexedit mode
    nnoremap <F8> :Hexmode<cr>
    inoremap <F8> <Esc>:Hexmode<cr>a

    "Buffer moving commands, but less typing
    " new buffer
    nmap <leader>T :enew<cr>

    " move to next buffer
    nmap <leader>l :bnext<cr>

    " previous buffer
    nmap <leader>h :bprevious<cr>

    "close buffer and move to previous
    nmap <leader>bq :bp <BAR> bd #<cr>

    " show all open buffers
    nmap <leader>bl :ls<cr>

    " Allow saving of root files when I forget to sudo vim
    cmap w!! w !sudo tee > /dev/null %

    " stop hitting f1 holy crap
    inoremap <F1> <ESC>
    nnoremap <F1> <ESC>
    vnoremap <F1> <ESC>

    " Return to most recent line when reopening a file
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"zz" | endif

else
    " VSCODE NEOVIM SETTINGS
    set laststatus=2

    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-f2)
end
